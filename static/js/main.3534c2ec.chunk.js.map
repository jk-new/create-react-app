{"version":3,"sources":["components/Header.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Header","React","Component","Form","name","onSubmit","this","props","GetWeather","type","autoComplete","placeholder","Weather","className","weatherIcon","id","style","display","city","country","temperature","humidity","wind","toPrecision","description","error","App","event","a","preventDefault","City","target","elements","value","Country","fetch","API_Call","json","Data","cod","setState","main","temp","sys","speed","weather","get_WeatherIcon","state","undefined","bind","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icon","rangeID","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3534c2ec.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"../App.css\"\r\n\r\nclass Header extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Weather Finder</h1>\r\n                <h3>Find out temperature, conditions, and more...</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\nimport \"../App.css\"\r\n\r\nclass Form extends React.Component{\r\n    render(){\r\n        return(\r\n            <form name=\"form1\" onSubmit = {this.props.GetWeather}>\r\n                <input type=\"text\" autoComplete=\"off\" name=\"city\" placeholder=\"City...\" ></input>\r\n                <input type=\"text\" autoComplete=\"off\" name=\"country\" placeholder=\"Country...\"></input>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Form\r\n\r\n","import React from \"react\"\r\nimport \"../App.css\"\r\n\r\nclass Weather extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                    <i className={`wi ${this.props.weatherIcon}`}/>\r\n                <div id=\"content\">   \r\n                    <p style={{display : this.props.city && this.props.country ? \"block\" : \"none\"}}><span>Location: </span>{this.props.city} , {this.props.country}</p>\r\n                    <p style={{display : this.props.city && this.props.country ? \"block\" : \"none\"}}><span>Temperature: </span>{this.props.temperature}Â°C</p>\r\n                    <p style={{display : this.props.city && this.props.country ? \"block\" : \"none\"}}><span>Humidity: </span>{this.props.humidity}%</p>\r\n                    <p style={{display : this.props.city && this.props.country ? \"block\" : \"none\"}}><span>Wind: </span>{this.props.wind*3.6.toPrecision(1)} km/h</p>\r\n                    <p style={{display : this.props.city && this.props.country ? \"block\" : \"none\"}}><span>Description: </span>{this.props.description}</p>\r\n                    <p id='err' style={{display : !this.props.city && !this.props.country ? \"block\" : \"none\"}}>{this.props.error}</p>\r\n                </div>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Weather","import React from \"react\"\nimport Header from \"./components/Header\"\nimport Form from \"./components/Form\"\nimport Weather from \"./components/Weather\"\nimport \"./weather-icons/css/weather-icons.css\"\n\nconst API_Key = \"e8101523bf5aaaf9f4b98f06ed73d602\"\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n      this.state = {\n        temperature : undefined,\n        city : undefined,\n        country : undefined,\n        humidity : undefined,\n        wind : undefined,\n        description : undefined,\n        error : undefined,\n        weatherIcon : undefined,\n      }\n      this.GetWeather = this.GetWeather.bind(this)\n\n      this.weatherIcon={\n        Thunderstorm : \"wi-thunderstorm\",\n        Drizzle : \"wi-sleet\",\n        Rain : \"wi-storm-showers\",\n        Snow : \"wi-snow\",\n        Atmosphere : \"wi-fog\",\n        Clear : \"wi-day-sunny\",\n        Clouds : \"wi-day-fog\"\n      }\n  }\n\nget_WeatherIcon(icon,rangeID){\n  if(rangeID >=200 && rangeID <=232){this.setState({icon:this.weatherIcon.Thunderstorm})}\n    else if(rangeID >=300 && rangeID <=321){this.setState({icon:this.weatherIcon.Drizzle})}\n      else if(rangeID >=500 && rangeID <=531){this.setState({icon:this.weatherIcon.Rain})}  \n        else if (rangeID >=600 && rangeID <=622){this.setState({icon:this.weatherIcon.Snow})}\n          else if (rangeID >=701 && rangeID <=781){this.setState({icon:this.weatherIcon.Atmosphere})}  \n            else if (rangeID ===800){this.setState({icon:this.weatherIcon.Clear})}\n  else {this.setState({icon:this.weatherIcon.Clouds})} \n  }\n\n  GetWeather = async(event) => {\n    event.preventDefault()\n    const City = event.target.elements.city.value\n    const Country = event.target.elements.country.value\n    const API_Call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${City},${Country}&appid=${API_Key}&units=metric`)\n    const Data = await API_Call.json()\n\n        if(City && Country){   \n          //console.log(Data)\n          if(Data.cod!=='404'){\n          this.setState({\n              temperature : Data.main.temp,\n              city : Data.name,\n              country : Data.sys.country,\n              humidity : Data.main.humidity,\n              wind : Data.wind.speed,\n              description : Data.weather[0].description,\n              error : \"\",\n            })\n\n            this.get_WeatherIcon(this.weatherIcon,Data.weather[0].id)\n\n          }\n            else{\n              this.setState({error : \"Please Enter Valid Values!\"})\n            }\n        }\n      \n        else{\n          this.setState({\n            error : \"Please Enter City and Coutry.\"\n          })\n        }\n      }\n      \n  render(){\n    return(\n      <div>\n        <Header/>\n        <Form GetWeather={this.GetWeather}/>\n        <Weather \n          temperature = {this.state.temperature}\n          city = {this.state.city}\n          country = {this.state.country}\n          humidity = {this.state.humidity}\n          wind = {this.state.wind}\n          description = {this.state.description}\n          error = {this.state.error}\n          weatherIcon = {this.state.icon}    \n        />\n      </div>\n    )   \n  }   \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}